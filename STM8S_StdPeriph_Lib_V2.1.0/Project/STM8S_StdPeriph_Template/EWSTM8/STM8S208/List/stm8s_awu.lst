###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             24/Jan/2015  12:32:30 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Libraries\STM8S_St #
#                    dPeriph_Driver\src\stm8s_awu.c                           #
#    Command line =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Libraries\STM8S_St #
#                    dPeriph_Driver\src\stm8s_awu.c -e -Ol --no_cse           #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model medium              #
#                    --data_model medium -o D:\Project\STM8S_StdPeriph_Lib_V2 #
#                    .1.0\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S208\Ob #
#                    j\ --dlib_config "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 6.0\stm8\LIB\dlstm8mmn.h" -D                   #
#                    USE_STM8_128_EVAL -D STM8S003 -lC                        #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\List\ -lb                 #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\List\ -I                  #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\..\ -I                             #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\..\..\..\Libraries\STM8S_StdPeriph #
#                    _Driver\inc\ -I D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Pr #
#                    oject\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Utilities #
#                    \STM8S_EVAL\ -I D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Pr #
#                    oject\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Utilities #
#                    \STM8S_EVAL\STM8S-128_EVAL\ -I                           #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\..\..\..\Utilities\STM8S_EVAL\Comm #
#                    on\ --vregs 16                                           #
#    List file    =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\List\stm8s_awu.lst        #
#    Object file  =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\Obj\stm8s_awu.o           #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Libraries\STM8S_StdPeriph_Driver\src\stm8s_awu.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_awu.c
      4            * @author  MCD Application Team
      5            * @version V2.1.0
      6            * @date    18-November-2011
      7            * @brief   This file contains all the functions for the AWU peripheral.  
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm8s_awu.h"
     24          
     25          /** @addtogroup STM8S_StdPeriph_Driver
     26            * @{
     27            */
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30          /* Private macro -------------------------------------------------------------*/
     31          /* Private variables ---------------------------------------------------------*/
     32          /* Private function prototypes -----------------------------------------------*/
     33          /* Private functions ---------------------------------------------------------*/
     34          
     35          /* See also AWU_Timebase_TypeDef structure in stm8s_awu.h file :
     36                                    N   2   5   1   2   4   8   1   3   6   1   2   5   1   2   1   3
     37                                    O   5   0   m   m   m   m   6   2   4   2   5   1   s   s   2   0
     38                                    I   0   0   s   s   s   s   m   m   m   8   6   2           s   s
     39                                    T   u   u                   s   s   s   m   m   m
     40                                        s   s                               s   s   s
     41          */
     42          /** Contains the different values to write in the APR register (used by AWU_Init function) */

   \                                 In section .near.rodata, align 1
     43          CONST uint8_t APR_Array[17] =
   \                     APR_Array:
   \   000000 001E1E1E1E1E          DC8 0, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 61, 23, 23, 62
     44              {
     45                  0, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 61, 23, 23, 62
     46              };
     47          
     48          /** Contains the different values to write in the TBR register (used by AWU_Init function) */

   \                                 In section .near.rodata, align 1
     49          CONST uint8_t TBR_Array[17] =
   \                     TBR_Array:
   \   000000 000102030405          DC8 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 14, 15, 15
     50              {
     51                  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 12, 14, 15, 15
     52              };
     53          
     54          /* Public functions ----------------------------------------------------------*/
     55          
     56          /**
     57            * @addtogroup AWU_Public_Functions
     58            * @{
     59            */
     60          
     61          /**
     62            * @brief  Deinitializes the AWU peripheral registers to their default reset
     63            * values.
     64            * @param  None
     65            * @retval None
     66            */

   \                                 In section .far_func.text, align 1
     67          void AWU_DeInit(void)
     68          {
     69              AWU->CSR = AWU_CSR_RESET_VALUE;
   \                     AWU_DeInit:
   \   000000 350050F0              MOV       L:0x50f0, #0x0
     70              AWU->APR = AWU_APR_RESET_VALUE;
   \   000004 353F50F1              MOV       L:0x50f1, #0x3f
     71              AWU->TBR = AWU_TBR_RESET_VALUE;
   \   000008 350050F2              MOV       L:0x50f2, #0x0
     72          }
   \   00000C 87                    RETF
     73          
     74          /**
     75            * @brief  Initializes the AWU peripheral according to the specified parameters.
     76            * @param   AWU_TimeBase : Time base selection (interval between AWU interrupts).
     77            * can be one of the values of @ref AWU_Timebase_TypeDef.
     78            * @retval None
     79            * @par Required preconditions:
     80            * The LS RC calibration must be performed before calling this function.
     81            */

   \                                 In section .far_func.text, align 1
     82          void AWU_Init(AWU_Timebase_TypeDef AWU_TimeBase)
     83          {
   \                     AWU_Init:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
     84          
     85              /* Check parameter */
     86              assert_param(IS_AWU_TIMEBASE_OK(AWU_TimeBase));
   \   000005 3D00                  TNZ       S:?b8
   \   000007 276F                  JREQ      L:??AWU_Init_0
   \   000009 B600                  LD        A, S:?b8
   \   00000B A101                  CP        A, #0x1
   \   00000D 2769                  JREQ      L:??AWU_Init_0
   \   00000F B600                  LD        A, S:?b8
   \   000011 A102                  CP        A, #0x2
   \   000013 2763                  JREQ      L:??AWU_Init_0
   \   000015 B600                  LD        A, S:?b8
   \   000017 A103                  CP        A, #0x3
   \   000019 275D                  JREQ      L:??AWU_Init_0
   \   00001B B600                  LD        A, S:?b8
   \   00001D A104                  CP        A, #0x4
   \   00001F 2757                  JREQ      L:??AWU_Init_0
   \   000021 B600                  LD        A, S:?b8
   \   000023 A105                  CP        A, #0x5
   \   000025 2751                  JREQ      L:??AWU_Init_0
   \   000027 B600                  LD        A, S:?b8
   \   000029 A106                  CP        A, #0x6
   \   00002B 274B                  JREQ      L:??AWU_Init_0
   \   00002D B600                  LD        A, S:?b8
   \   00002F A107                  CP        A, #0x7
   \   000031 2745                  JREQ      L:??AWU_Init_0
   \   000033 B600                  LD        A, S:?b8
   \   000035 A108                  CP        A, #0x8
   \   000037 273F                  JREQ      L:??AWU_Init_0
   \   000039 B600                  LD        A, S:?b8
   \   00003B A109                  CP        A, #0x9
   \   00003D 2739                  JREQ      L:??AWU_Init_0
   \   00003F B600                  LD        A, S:?b8
   \   000041 A10A                  CP        A, #0xa
   \   000043 2733                  JREQ      L:??AWU_Init_0
   \   000045 B600                  LD        A, S:?b8
   \   000047 A10B                  CP        A, #0xb
   \   000049 272D                  JREQ      L:??AWU_Init_0
   \   00004B B600                  LD        A, S:?b8
   \   00004D A10C                  CP        A, #0xc
   \   00004F 2727                  JREQ      L:??AWU_Init_0
   \   000051 B600                  LD        A, S:?b8
   \   000053 A10D                  CP        A, #0xd
   \   000055 2721                  JREQ      L:??AWU_Init_0
   \   000057 B600                  LD        A, S:?b8
   \   000059 A10E                  CP        A, #0xe
   \   00005B 271B                  JREQ      L:??AWU_Init_0
   \   00005D B600                  LD        A, S:?b8
   \   00005F A10F                  CP        A, #0xf
   \   000061 2715                  JREQ      L:??AWU_Init_0
   \   000063 B600                  LD        A, S:?b8
   \   000065 A110                  CP        A, #0x10
   \   000067 270F                  JREQ      L:??AWU_Init_0
   \   000069 AE0056                LDW       X, #0x56
   \   00006C BF00                  LDW       S:?w1, X
   \   00006E 5F                    CLRW      X
   \   00006F BF00                  LDW       S:?w0, X
   \   000071 AE0000                LDW       X, #`?<Constant "D:\\\\Project\\\\STM8S_StdP...">`
   \   000074 8D000000              CALLF     assert_failed
     87          
     88              /* Enable the AWU peripheral */
     89              AWU->CSR |= AWU_CSR_AWUEN;
   \                     ??AWU_Init_0:
   \   000078 721850F0              BSET      L:0x50f0, #0x4
     90          
     91              /* Set the TimeBase */
     92              AWU->TBR &= (uint8_t)(~AWU_TBR_AWUTB);
   \   00007C C650F2                LD        A, L:0x50f2
   \   00007F A4F0                  AND       A, #0xf0
   \   000081 C750F2                LD        L:0x50f2, A
     93              AWU->TBR |= TBR_Array[(uint8_t)AWU_TimeBase];
   \   000084 5F                    CLRW      X
   \   000085 41                    EXG       A, XL
   \   000086 B600                  LD        A, S:?b8
   \   000088 41                    EXG       A, XL
   \   000089 D60000                LD        A, (L:TBR_Array,X)
   \   00008C CA50F2                OR        A, L:0x50f2
   \   00008F C750F2                LD        L:0x50f2, A
     94          
     95              /* Set the APR divider */
     96              AWU->APR &= (uint8_t)(~AWU_APR_APR);
   \   000092 C650F1                LD        A, L:0x50f1
   \   000095 A4C0                  AND       A, #0xc0
   \   000097 C750F1                LD        L:0x50f1, A
     97              AWU->APR |= APR_Array[(uint8_t)AWU_TimeBase];
   \   00009A 5F                    CLRW      X
   \   00009B 41                    EXG       A, XL
   \   00009C B600                  LD        A, S:?b8
   \   00009E 41                    EXG       A, XL
   \   00009F D60000                LD        A, (L:APR_Array,X)
   \   0000A2 CA50F1                OR        A, L:0x50f1
   \   0000A5 C750F1                LD        L:0x50f1, A
     98          
     99          }
   \   0000A8 320000                POP       S:?b8
   \   0000AB 87                    RETF
    100          
    101          /**
    102            * @brief  Enable or disable the AWU peripheral.
    103            * @param   NewState Indicates the new state of the AWU peripheral.
    104            * @retval None
    105            * @par Required preconditions:
    106            * Initialisation of AWU and LS RC calibration must be done before.
    107            */

   \                                 In section .far_func.text, align 1
    108          void AWU_Cmd(FunctionalState NewState)
    109          {
    110              if (NewState != DISABLE)
   \                     AWU_Cmd:
   \   000000 4D                    TNZ       A
   \   000001 2705                  JREQ      L:??AWU_Cmd_0
    111              {
    112                  /* Enable the AWU peripheral */
    113                  AWU->CSR |= AWU_CSR_AWUEN;
   \   000003 721850F0              BSET      L:0x50f0, #0x4
   \   000007 87                    RETF
    114              }
    115              else
    116              {
    117                  /* Disable the AWU peripheral */
    118                  AWU->CSR &= (uint8_t)(~AWU_CSR_AWUEN);
   \                     ??AWU_Cmd_0:
   \   000008 721950F0              BRES      L:0x50f0, #0x4
    119              }
    120          }
   \   00000C 87                    RETF
    121          
    122          /**
    123            * @brief  Update APR register with the measured LSI frequency.
    124            * @par Note on the APR calculation:
    125            * A is the integer part of lsifreqkhz/4 and x the decimal part.
    126            * x <= A/(1+2A) is equivalent to A >= x(1+2A) and also to 4A >= 4x(1+2A) [F1]
    127            * but we know that A + x = lsifreqkhz/4 ==> 4x = lsifreqkhz-4A
    128            * so [F1] can be written :
    129            * 4A >= (lsifreqkhz-4A)(1+2A)
    130            * @param   LSIFreqHz Low Speed RC frequency measured by timer (in Hz).
    131            * @retval None
    132            * @par Required preconditions:
    133            * - AWU must be disabled to avoid unwanted interrupts.
    134            */

   \                                 In section .far_func.text, align 1
    135          void AWU_LSICalibrationConfig(uint32_t LSIFreqHz)
    136          {
   \                     AWU_LSICalibrationConfig:
   \   000000 8D000000              CALLF     L:?push_l3
   \   000004 8D000000              CALLF     L:?push_w4
   \   000008 8D000000              CALLF     L:?mov_l3_l0
    137          
    138              uint16_t lsifreqkhz = 0x0;
   \   00000C 3F00                  CLR       S:?b9
   \   00000E 3F00                  CLR       S:?b8
    139              uint16_t A = 0x0;
   \   000010 905F                  CLRW      Y
    140          
    141              /* Check parameter */
    142              assert_param(IS_LSI_FREQUENCY_OK(LSIFreqHz));
   \   000012 AEADB0                LDW       X, #0xadb0
   \   000015 BF00                  LDW       S:?w3, X
   \   000017 5F                    CLRW      X
   \   000018 5C                    INCW      X
   \   000019 BF00                  LDW       S:?w2, X
   \   00001B 8D000000              CALLF     L:?mov_l0_l3
   \   00001F 8D000000              CALLF     L:?sub32_l0_l0_l1
   \   000023 BE00                  LDW       X, S:?w0
   \   000025 A30000                CPW       X, #0x0
   \   000028 2605                  JRNE      L:??AWU_LSICalibrationConfig_0
   \   00002A BE00                  LDW       X, S:?w1
   \   00002C A39C41                CPW       X, #0x9c41
   \                     ??AWU_LSICalibrationConfig_0:
   \   00002F 250F                  JRC       L:??AWU_LSICalibrationConfig_1
   \   000031 AE008E                LDW       X, #0x8e
   \   000034 BF00                  LDW       S:?w1, X
   \   000036 5F                    CLRW      X
   \   000037 BF00                  LDW       S:?w0, X
   \   000039 AE0000                LDW       X, #`?<Constant "D:\\\\Project\\\\STM8S_StdP...">`
   \   00003C 8D000000              CALLF     assert_failed
    143          
    144              lsifreqkhz = (uint16_t)(LSIFreqHz / 1000); /* Converts value in kHz */
   \                     ??AWU_LSICalibrationConfig_1:
   \   000040 8D000000              CALLF     L:?mov_l0_l3
   \   000044 8D000000              CALLF     L:?udiv32_l0_l0_dl
   \   000048 000003E8              DC32      0x3e8
   \   00004C 8D000000              CALLF     L:?mov_w4_w1
    145          
    146              /* Calculation of AWU calibration value */
    147          
    148              A = (uint16_t)(lsifreqkhz >> 2U); /* Division by 4, keep integer part only */
   \   000050 BE00                  LDW       X, S:?w4
   \   000052 54                    SRLW      X
   \   000053 54                    SRLW      X
   \   000054 9093                  LDW       Y, X
    149          
    150              if ((4U * A) >= ((lsifreqkhz - (4U * A)) * (1U + (2U * A))))
   \   000056 AE0004                LDW       X, #0x4
   \   000059 BF00                  LDW       S:?w0, X
   \   00005B 93                    LDW       X, Y
   \   00005C 8D000000              CALLF     L:?mul16_x_x_w0
   \   000060 BF00                  LDW       S:?w0, X
   \   000062 BE00                  LDW       X, S:?w4
   \   000064 72B00000              SUBW      X, S:?w0
   \   000068 BF00                  LDW       S:?w1, X
   \   00006A 93                    LDW       X, Y
   \   00006B 58                    SLLW      X
   \   00006C 5C                    INCW      X
   \   00006D BF00                  LDW       S:?w0, X
   \   00006F BE00                  LDW       X, S:?w1
   \   000071 8D000000              CALLF     L:?mul16_x_x_w0
   \   000075 BF00                  LDW       S:?w1, X
   \   000077 AE0004                LDW       X, #0x4
   \   00007A BF00                  LDW       S:?w0, X
   \   00007C 93                    LDW       X, Y
   \   00007D 8D000000              CALLF     L:?mul16_x_x_w0
   \   000081 B300                  CPW       X, S:?w1
   \   000083 2509                  JRC       L:??AWU_LSICalibrationConfig_2
    151              {
    152                  AWU->APR = (uint8_t)(A - 2U);
   \   000085 909F                  LD        A, YL
   \   000087 ABFE                  ADD       A, #0xfe
   \   000089 C750F1                LD        L:0x50f1, A
   \   00008C 2007                  JRA       L:??AWU_LSICalibrationConfig_3
    153              }
    154              else
    155              {
    156                  AWU->APR = (uint8_t)(A - 1U);
   \                     ??AWU_LSICalibrationConfig_2:
   \   00008E 909F                  LD        A, YL
   \   000090 ABFF                  ADD       A, #0xff
   \   000092 C750F1                LD        L:0x50f1, A
    157              }
    158          }
   \                     ??AWU_LSICalibrationConfig_3:
   \   000095 8D000000              CALLF     L:?pop_w4
   \   000099 8D000000              CALLF     L:?pop_l3
   \   00009D 87                    RETF
    159          
    160          /**
    161            * @brief  Configures AWU in Idle mode to reduce power consumption.
    162            * @param  None
    163            * @retval None
    164            */

   \                                 In section .far_func.text, align 1
    165          void AWU_IdleModeEnable(void)
    166          {
    167              /* Disable AWU peripheral */
    168              AWU->CSR &= (uint8_t)(~AWU_CSR_AWUEN);
   \                     AWU_IdleModeEnable:
   \   000000 721950F0              BRES      L:0x50f0, #0x4
    169          
    170              /* No AWU timebase */
    171              AWU->TBR = (uint8_t)(~AWU_TBR_AWUTB);
   \   000004 35F050F2              MOV       L:0x50f2, #0xf0
    172          }
   \   000008 87                    RETF
    173          
    174          /**
    175            * @brief  Returns status of the AWU peripheral flag.
    176            * @param  None
    177            * @retval FlagStatus : Status of the AWU flag.
    178            * This parameter can be any of the @ref FlagStatus enumeration.
    179            */

   \                                 In section .far_func.text, align 1
    180          FlagStatus AWU_GetFlagStatus(void)
    181          {
    182              return((FlagStatus)(((uint8_t)(AWU->CSR & AWU_CSR_AWUF) == (uint8_t)0x00) ? RESET : SET));
   \                     AWU_GetFlagStatus:
   \   000000 720B50F003            BTJF      L:0x50f0, #0x5, L:??AWU_GetFlagStatus_0
   \   000005 A601                  LD        A, #0x1
   \   000007 87                    RETF
   \                     ??AWU_GetFlagStatus_0:
   \   000008 4F                    CLR       A
   \   000009 87                    RETF
    183          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "D:\\\\Project\\\\STM8S_StdP...">`:
   \   000000 443A5C50726F          DC8 44H, 3AH, 5CH, 50H, 72H, 6FH, 6AH, 65H
   \   000008 63745C53544D          DC8 63H, 74H, 5CH, 53H, 54H, 4DH, 38H, 53H
   \   000010 5F5374645065          DC8 5FH, 53H, 74H, 64H, 50H, 65H, 72H, 69H
   \   000018 70685F4C6962          DC8 70H, 68H, 5FH, 4CH, 69H, 62H, 5FH, 56H
   \   000020 322E312E305C          DC8 32H, 2EH, 31H, 2EH, 30H, 5CH, 4CH, 69H
   \   000028 627261726965          DC8 62H, 72H, 61H, 72H, 69H, 65H, 73H, 5CH
   \   000030 53544D38535F          DC8 53H, 54H, 4DH, 38H, 53H, 5FH, 53H, 74H
   \   000038 645065726970          DC8 64H, 50H, 65H, 72H, 69H, 70H, 68H, 5FH
   \   000040 447269766572          DC8 44H, 72H, 69H, 76H, 65H, 72H, 5CH, 73H
   \   000048 72635C73746D          DC8 72H, 63H, 5CH, 73H, 74H, 6DH, 38H, 73H
   \   000050 5F6177752E63          DC8 5FH, 61H, 77H, 75H, 2EH, 63H, 0
    184          
    185          
    186          /**
    187            * @}
    188            */
    189            
    190          /**
    191            * @}
    192            */
    193            
    194          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                           Bytes
     --------------                           -----
     APR_Array                                  17
     TBR_Array                                  17
     AWU_DeInit                                 13
     AWU_Init                                  172
     AWU_Cmd                                    13
     AWU_LSICalibrationConfig                  158
     AWU_IdleModeEnable                          9
     AWU_GetFlagStatus                          10
     ?<Constant "D:\\Project\\STM8S_StdP...">   87

 
 375 bytes in section .far_func.text
 121 bytes in section .near.rodata
 
 375 bytes of CODE  memory
 121 bytes of CONST memory

Errors: none
Warnings: none
