###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             24/Jan/2015  12:33:12 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\stm8s_it.c                                #
#    Command line =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\stm8s_it.c -e -Ol --no_cse --no_unroll    #
#                    --no_inline --no_code_motion --no_tbaa --no_cross_call   #
#                    --debug --code_model medium --data_model medium -o       #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\Obj\ --dlib_config        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.0\stm8\LIB\dlstm8mmn.h" -D USE_STM8_128_EVAL -D        #
#                    STM8S003 -lC D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Proje #
#                    ct\STM8S_StdPeriph_Template\EWSTM8\STM8S208\List\ -lb    #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\List\ -I                  #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\..\ -I                             #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\..\..\..\Libraries\STM8S_StdPeriph #
#                    _Driver\inc\ -I D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Pr #
#                    oject\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Utilities #
#                    \STM8S_EVAL\ -I D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Pr #
#                    oject\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Utilities #
#                    \STM8S_EVAL\STM8S-128_EVAL\ -I                           #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\..\..\..\Utilities\STM8S_EVAL\Comm #
#                    on\ --vregs 16                                           #
#    List file    =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\List\stm8s_it.lst         #
#    Object file  =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\Obj\stm8s_it.o            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdPeriph_Template\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file     stm8s_it.c
      4            * @author   MCD Application Team
      5            * @version  V2.0.1
      6            * @date     18-November-2011
      7            * @brief    Main Interrupt Service Routines.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm8s_it.h"
     24          
     25          /** @addtogroup UART1_Printf
     26            * @{
     27            */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          /* Private macro -------------------------------------------------------------*/
     32          /* Private variables ---------------------------------------------------------*/
     33          extern __IO uint32_t   system_tick ;

   \                                 In section .near.bss, align 1
     34          uint32_t   timeout_uart ;
   \                     timeout_uart:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
     35          UART_RECEIVE_STRUCT  uart_data ;    	
   \                     uart_data:
   \   000000                       DS8 107
     36          /* Private function prototypes -----------------------------------------------*/
     37          /* Private functions ---------------------------------------------------------*/
     38          /* Public functions ----------------------------------------------------------*/
     39          extern void TimingDelay_Decrement(void);
     40          #ifdef _COSMIC_
     41          /**
     42            * @brief  Dummy interrupt routine
     43            * @param  None
     44            * @retval None
     45            */
     46          @far @interrupt void NonHandledInterrupt(void)
     47          {
     48            /* In order to detect unexpected events during development,
     49              it is recommended to set a breakpoint on the following instruction.
     50            */
     51          }
     52          
     53          /**
     54            * @brief  TRAP interrupt routine
     55            * @param  None
     56            * @retval None
     57            */
     58          @far @interrupt void TRAP_IRQHandler(void)
     59          {
     60            /* In order to detect unexpected events during development,
     61               it is recommended to set a breakpoint on the following instruction.
     62            */
     63          }
     64          #else /*_RAISONANCE_*/
     65          
     66          /**
     67            * @brief  TRAP interrupt routine
     68            * @param  None
     69            * @retval None
     70            */

   \                                 In section .far_func.text, align 1
     71          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     72          {
     73            /* In order to detect unexpected events during development,
     74               it is recommended to set a breakpoint on the following instruction.
     75            */
     76          }
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 80                    IRET
     77          #endif /*_COSMIC_*/
     78          
     79          /**
     80            * @brief  Top Level Interrupt routine
     81            * @param None
     82            * @retval
     83            * None
     84            */

   \                                 In section .far_func.text, align 1
     85          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
     86          {
     87            /* In order to detect unexpected events during development,
     88               it is recommended to set a breakpoint on the following instruction.
     89            */
     90          }
   \                     TLI_IRQHandler:
   \                     _interrupt_2:
   \   000000 80                    IRET
     91          
     92          /**
     93            * @brief  Auto Wake Up Interrupt routine
     94            * @param None
     95            * @retval
     96            * None
     97            */

   \                                 In section .far_func.text, align 1
     98          INTERRUPT_HANDLER(AWU_IRQHandler, 1)	
     99          {
    100            /* In order to detect unexpected events during development,
    101               it is recommended to set a breakpoint on the following instruction.
    102            */
    103          }
   \                     AWU_IRQHandler:
   \                     _interrupt_3:
   \   000000 80                    IRET
    104          
    105          /**
    106            * @brief  Clock Controller Interrupt routine
    107            * @param None
    108            * @retval
    109            * None
    110            */

   \                                 In section .far_func.text, align 1
    111          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    112          {
    113            /* In order to detect unexpected events during development,
    114               it is recommended to set a breakpoint on the following instruction.
    115            */
    116          }
   \                     CLK_IRQHandler:
   \                     _interrupt_4:
   \   000000 80                    IRET
    117          
    118          /**
    119            * @brief  External Interrupt PORTA Interrupt routine
    120            * @param None
    121            * @retval
    122            * None
    123            */

   \                                 In section .far_func.text, align 1
    124          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    125          {
    126            /* In order to detect unexpected events during development,
    127               it is recommended to set a breakpoint on the following instruction.
    128            */
    129          }
   \                     EXTI_PORTA_IRQHandler:
   \                     _interrupt_5:
   \   000000 80                    IRET
    130          
    131          /**
    132            * @brief  External Interrupt PORTB Interrupt routine
    133            * @param  None
    134            * @retval None
    135            */

   \                                 In section .far_func.text, align 1
    136          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    137          {
    138            /* In order to detect unexpected events during development,
    139               it is recommended to set a breakpoint on the following instruction.
    140            */
    141          }
   \                     EXTI_PORTB_IRQHandler:
   \                     _interrupt_6:
   \   000000 80                    IRET
    142          
    143          /**
    144            * @brief  External Interrupt PORTC Interrupt routine
    145            * @param None
    146            * @retval
    147            * None
    148            */

   \                                 In section .far_func.text, align 1
    149          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    150          {
    151            /* In order to detect unexpected events during development,
    152               it is recommended to set a breakpoint on the following instruction.
    153            */
    154          }
   \                     EXTI_PORTC_IRQHandler:
   \                     _interrupt_7:
   \   000000 80                    IRET
    155          
    156          /**
    157            * @brief  External Interrupt PORTD Interrupt routine
    158            * @param None
    159            * @retval
    160            * None
    161            */

   \                                 In section .far_func.text, align 1
    162          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    163          {
    164            /* In order to detect unexpected events during development,
    165               it is recommended to set a breakpoint on the following instruction.
    166            */
    167          }
   \                     EXTI_PORTD_IRQHandler:
   \                     _interrupt_8:
   \   000000 80                    IRET
    168          
    169          /**
    170            * @brief  External Interrupt PORTE Interrupt routine
    171            * @param None
    172            * @retval
    173            * None
    174            */

   \                                 In section .far_func.text, align 1
    175          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    176          {
    177            /* In order to detect unexpected events during development,
    178               it is recommended to set a breakpoint on the following instruction.
    179            */
    180          }
   \                     EXTI_PORTE_IRQHandler:
   \                     _interrupt_9:
   \   000000 80                    IRET
    181          #ifdef STM8S903
    182          /**
    183            * @brief  External Interrupt PORTF Interrupt routine
    184            * @param None
    185            * @retval
    186            * None
    187            */
    188           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    189          {
    190            /* In order to detect unexpected events during development,
    191               it is recommended to set a breakpoint on the following instruction.
    192            */
    193          }
    194          #endif /*STM8S903*/
    195          
    196          #ifdef STM8S208
    197          /**
    198            * @brief  CAN RX Interrupt routine
    199            * @param None
    200            * @retval
    201            * None
    202            */
    203           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    204          {
    205            /* In order to detect unexpected events during development,
    206               it is recommended to set a breakpoint on the following instruction.
    207            */
    208          }
    209          
    210          /**
    211            * @brief  CAN TX Interrupt routine
    212            * @param None
    213            * @retval
    214            * None
    215            */
    216           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    217          {
    218            /* In order to detect unexpected events during development,
    219               it is recommended to set a breakpoint on the following instruction.
    220            */
    221          }
    222          #endif /*STM8S208 || STM8AF52Ax */
    223          
    224          /**
    225            * @brief  SPI Interrupt routine
    226            * @param None
    227            * @retval
    228            * None
    229            */

   \                                 In section .far_func.text, align 1
    230          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    231          {
    232            /* In order to detect unexpected events during development,
    233               it is recommended to set a breakpoint on the following instruction.
    234            */
    235          }
   \                     SPI_IRQHandler:
   \                     _interrupt_12:
   \   000000 80                    IRET
    236          
    237          /**
    238            * @brief  Timer1 Update/Overflow/Trigger/Break Interrupt routine
    239            * @param None
    240            * @retval
    241            * None
    242            */

   \                                 In section .far_func.text, align 1
    243          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    244          {
    245            /* In order to detect unexpected events during development,
    246               it is recommended to set a breakpoint on the following instruction.
    247            */
    248          }
   \                     TIM1_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_13:
   \   000000 80                    IRET
    249          
    250          /**
    251            * @brief  Timer1 Capture/Compare Interrupt routine
    252            * @param None
    253            * @retval
    254            * None
    255            */

   \                                 In section .far_func.text, align 1
    256          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    257          {
    258            /* In order to detect unexpected events during development,
    259               it is recommended to set a breakpoint on the following instruction.
    260            */
    261          }
   \                     TIM1_CAP_COM_IRQHandler:
   \                     _interrupt_14:
   \   000000 80                    IRET
    262          
    263          #ifdef STM8S903
    264          /**
    265            * @brief  Timer5 Update/Overflow/Break/Trigger Interrupt routine
    266            * @param None
    267            * @retval
    268            * None
    269            */
    270           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    271          {
    272            /* In order to detect unexpected events during development,
    273               it is recommended to set a breakpoint on the following instruction.
    274            */
    275          }
    276          /**
    277            * @brief  Timer5 Capture/Compare Interrupt routine
    278            * @param None
    279            * @retval
    280            * None
    281            */
    282           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    283          {
    284            /* In order to detect unexpected events during development,
    285               it is recommended to set a breakpoint on the following instruction.
    286            */
    287          }
    288          
    289          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    290          /**
    291            * @brief  Timer2 Update/Overflow/Break Interrupt routine
    292            * @param None
    293            * @retval
    294            * None
    295            */

   \                                 In section .far_func.text, align 1
    296           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    297          {
    298            /* In order to detect unexpected events during development,
    299               it is recommended to set a breakpoint on the following instruction.
    300            */
    301          }
   \                     TIM2_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_15:
   \   000000 80                    IRET
    302          
    303          /**
    304            * @brief  Timer2 Capture/Compare Interrupt routine
    305            * @param None
    306            * @retval
    307            * None
    308            */

   \                                 In section .far_func.text, align 1
    309           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    310          {
    311            /* In order to detect unexpected events during development,
    312               it is recommended to set a breakpoint on the following instruction.
    313            */
    314          }
   \                     TIM2_CAP_COM_IRQHandler:
   \                     _interrupt_16:
   \   000000 80                    IRET
    315          #endif /*STM8S903*/
    316          
    317          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    318              defined(STM8S005) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8AF626x)
    319          /**
    320            * @brief  Timer3 Update/Overflow/Break Interrupt routine
    321            * @param None
    322            * @retval
    323            * None
    324            */
    325           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    326          {
    327            /* In order to detect unexpected events during development,
    328               it is recommended to set a breakpoint on the following instruction.
    329            */
    330          }
    331          
    332          /**
    333            * @brief  Timer3 Capture/Compare Interrupt routine
    334            * @param None
    335            * @retval
    336            * None
    337            */
    338           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    339          {
    340            /* In order to detect unexpected events during development,
    341               it is recommended to set a breakpoint on the following instruction.
    342            */
    343          }
    344          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    345          
    346          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    347              defined(STM8S003) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8S903)
    348          /**
    349            * @brief  UART1 TX Interrupt routine
    350            * @param None
    351            * @retval
    352            * None
    353            */

   \                                 In section .far_func.text, align 1
    354           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    355          {
    356            /* In order to detect unexpected events during development,
    357               it is recommended to set a breakpoint on the following instruction.
    358            */
    359          }
   \                     UART1_TX_IRQHandler:
   \                     _interrupt_19:
   \   000000 80                    IRET
    360          
    361          /**
    362            * @brief  UART1 RX Interrupt routine
    363            * @param None
    364            * @retval
    365            * None
    366            */

   \                                 In section .far_func.text, align 1
    367           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    368          {
   \                     UART1_RX_IRQHandler:
   \                     _interrupt_20:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
   \   00000E 8D000000              CALLF     L:?push_w4
    369            /* In order to detect unexpected events during development,
    370               it is recommended to set a breakpoint on the following instruction.
    371            */
    372              UART1_ClearFlag(UART1_FLAG_RXNE) ;
   \   000012 AE0020                LDW       X, #0x20
   \   000015 8D000000              CALLF     UART1_ClearFlag
    373               timeout_uart                           = system_tick ;
   \   000019 AE0000                LDW       X, #system_tick
   \   00001C 8D000000              CALLF     L:?load32_l0_0x
   \   000020 AE0000                LDW       X, #timeout_uart
   \   000023 8D000000              CALLF     L:?load32_0x_l0
    374               uart_data.flag_interrupt               = 1 ;
   \   000027 35010000              MOV       L:uart_data + 101, #0x1
    375               uart_data.buff[uart_data.count_data++] = UART1_ReceiveData8();
   \   00002B C60000                LD        A, L:uart_data + 106
   \   00002E B700                  LD        S:?b0, A
   \   000030 B600                  LD        A, S:?b0
   \   000032 AB01                  ADD       A, #0x1
   \   000034 C70000                LD        L:uart_data + 106, A
   \   000037 5F                    CLRW      X
   \   000038 41                    EXG       A, XL
   \   000039 B600                  LD        A, S:?b0
   \   00003B 41                    EXG       A, XL
   \   00003C 89                    PUSHW     X
   \   00003D 8D000000              CALLF     UART1_ReceiveData8
   \   000041 85                    POPW      X
   \   000042 D70000                LD        (L:uart_data,X), A
    376               if(uart_data.count_data == 119) uart_data.count_data = 0 ;
   \   000045 C60000                LD        A, L:uart_data + 106
   \   000048 A177                  CP        A, #0x77
   \   00004A 2604                  JRNE      L:??UART1_RX_IRQHandler_0
   \   00004C 35000000              MOV       L:uart_data + 106, #0x0
    377          }
   \                     ??UART1_RX_IRQHandler_0:
   \   000050 8D000000              CALLF     L:?pop_w4
   \   000054 8D000000              CALLF     L:?pop_l1
   \   000058 8D000000              CALLF     L:?pop_l0
   \   00005C 80                    IRET
    378          #endif /*STM8S105*/
    379          
    380          /**
    381            * @brief  I2C Interrupt routine
    382            * @param None
    383            * @retval
    384            * None
    385            */

   \                                 In section .far_func.text, align 1
    386          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    387          {
    388            /* In order to detect unexpected events during development,
    389               it is recommended to set a breakpoint on the following instruction.
    390            */
    391          }
   \                     I2C_IRQHandler:
   \                     _interrupt_21:
   \   000000 80                    IRET
    392          
    393          #if defined(STM8S105) || defined(STM8S005) ||  defined (STM8AF626x)
    394          /**
    395            * @brief  UART2 TX interrupt routine.
    396            * @param None
    397            * @retval
    398            * None
    399            */
    400           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    401          {
    402              /* In order to detect unexpected events during development,
    403                 it is recommended to set a breakpoint on the following instruction.
    404              */
    405          }
    406          
    407          /**
    408            * @brief  UART2 RX interrupt routine.
    409            * @param None
    410            * @retval
    411            * None
    412            */
    413           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    414          {
    415              /* In order to detect unexpected events during development,
    416                 it is recommended to set a breakpoint on the following instruction.
    417              */
    418          }
    419          #endif /* STM8S105*/
    420          
    421          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    422          /**
    423            * @brief  UART3 TX interrupt routine.
    424            * @param None
    425            * @retval
    426            * None
    427            */
    428           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    429          {
    430            /* In order to detect unexpected events during development,
    431               it is recommended to set a breakpoint on the following instruction.
    432            */
    433          }
    434          
    435          /**
    436            * @brief  UART3 RX interrupt routine.
    437            * @param None
    438            * @retval
    439            * None
    440            */
    441           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    442          {
    443            /* In order to detect unexpected events during development,
    444               it is recommended to set a breakpoint on the following instruction.
    445            */
    446          }
    447          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    448          
    449          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    450          /**
    451            * @brief  ADC2 interrupt routine.
    452            * @param None
    453            * @retval
    454            * None
    455            */
    456           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    457          {
    458              /* In order to detect unexpected events during development,
    459                 it is recommended to set a breakpoint on the following instruction.
    460              */
    461          }
    462          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    463          /**
    464            * @brief  ADC1 interrupt routine.
    465            * @param  None
    466            * @retval None
    467            */

   \                                 In section .far_func.text, align 1
    468           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    469          {
    470              /* In order to detect unexpected events during development,
    471                 it is recommended to set a breakpoint on the following instruction.
    472              */
    473          }
   \                     ADC1_IRQHandler:
   \                     _interrupt_24:
   \   000000 80                    IRET
    474          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    475          
    476          #ifdef STM8S903
    477          /**
    478            * @brief  Timer6 Update/Overflow/Trigger Interrupt routine
    479            * @param None
    480            * @retval
    481            * None
    482            */
    483          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    484          {
    485            /* In order to detect unexpected events during development,
    486               it is recommended to set a breakpoint on the following instruction.
    487            */
    488          }
    489          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    490          /**
    491            * @brief  Timer4 Update/Overflow Interrupt routine
    492            * @param None
    493            * @retval
    494            * None
    495            */

   \                                 In section .near.bss, align 1
    496          uint8_t gps_fix = 0;
   \                     gps_fix:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    497          uint32_t time_led =0;
   \                     time_led:
   \   000000                       DS8 4

   \                                 In section .far_func.text, align 1
    498          INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    499          {
   \                     TIM4_UPD_OVF_IRQHandler:
   \                     _interrupt_25:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    500              system_tick++;
   \   00000E AE0000                LDW       X, #system_tick
   \   000011 8D000000              CALLF     L:?load32_l0_0x
   \   000015 8D000000              CALLF     L:?inc32_l0_l0
   \   000019 AE0000                LDW       X, #system_tick
   \   00001C 8D000000              CALLF     L:?load32_0x_l0
    501              if((system_tick > timeout_uart + 1)&&(uart_data.flag_interrupt == 1))
   \   000020 AE0000                LDW       X, #timeout_uart
   \   000023 8D000000              CALLF     L:?load32_l0_0x
   \   000027 8D000000              CALLF     L:?inc32_l0_l0
   \   00002B AE0000                LDW       X, #system_tick
   \   00002E 8D000000              CALLF     L:?ucmp32_c_l0_0x
   \   000032 242A                  JRNC      L:??TIM4_UPD_OVF_IRQHandler_0
   \   000034 C60000                LD        A, L:uart_data + 101
   \   000037 A101                  CP        A, #0x1
   \   000039 2623                  JRNE      L:??TIM4_UPD_OVF_IRQHandler_0
    502              {
    503                  //memset(uart_data.buff + uart_data.count_data , '\0', 120 - uart_data.count_data);
    504                  uart_data.buff[uart_data.count_data] = '\0';
   \   00003B C60000                LD        A, L:uart_data + 106
   \   00003E 5F                    CLRW      X
   \   00003F 97                    LD        XL, A
   \   000040 4F                    CLR       A
   \   000041 D70000                LD        (L:uart_data,X), A
    505                  uart_data.count_data            = 0 ;
   \   000044 35000000              MOV       L:uart_data + 106, #0x0
    506                  uart_data.flag_interrupt        = 0;
   \   000048 35000000              MOV       L:uart_data + 101, #0x0
    507                  uart_data.flag_uart_compelete   = 1 ;
   \   00004C 35010000              MOV       L:uart_data + 100, #0x1
    508                  timeout_uart                    = system_tick ;
   \   000050 AE0000                LDW       X, #system_tick
   \   000053 8D000000              CALLF     L:?load32_l0_0x
   \   000057 AE0000                LDW       X, #timeout_uart
   \   00005A 8D000000              CALLF     L:?load32_0x_l0
    509          
    510              }
    511              if((gps_fix == 0) && (system_tick - time_led > 500))
   \                     ??TIM4_UPD_OVF_IRQHandler_0:
   \   00005E C60000                LD        A, L:gps_fix
   \   000061 A100                  CP        A, #0x0
   \   000063 2635                  JRNE      L:??TIM4_UPD_OVF_IRQHandler_1
   \   000065 90AE0000              LDW       Y, #time_led
   \   000069 AE0000                LDW       X, #system_tick
   \   00006C 8D000000              CALLF     L:?load32_l0_0x
   \   000070 93                    LDW       X, Y
   \   000071 8D000000              CALLF     L:?sub32_l0_l0_0x
   \   000075 BE00                  LDW       X, S:?w0
   \   000077 A30000                CPW       X, #0x0
   \   00007A 2605                  JRNE      L:??TIM4_UPD_OVF_IRQHandler_2
   \   00007C BE00                  LDW       X, S:?w1
   \   00007E A301F5                CPW       X, #0x1f5
   \                     ??TIM4_UPD_OVF_IRQHandler_2:
   \   000081 2517                  JRC       L:??TIM4_UPD_OVF_IRQHandler_1
    512              {
    513                  time_led = system_tick;
   \   000083 AE0000                LDW       X, #system_tick
   \   000086 8D000000              CALLF     L:?load32_l0_0x
   \   00008A AE0000                LDW       X, #time_led
   \   00008D 8D000000              CALLF     L:?load32_0x_l0
    514                  GPIO_WriteReverse(LED_GPIO_PORT, (GPIO_Pin_TypeDef)LED_GPIO_PINS);
   \   000091 A610                  LD        A, #0x10
   \   000093 AE5005                LDW       X, #0x5005
   \   000096 8D000000              CALLF     GPIO_WriteReverse
    515              }	    
    516            /* Cleat Interrupt Pending bit */
    517            TIM4_ClearITPendingBit(TIM4_IT_UPDATE);
   \                     ??TIM4_UPD_OVF_IRQHandler_1:
   \   00009A A601                  LD        A, #0x1
   \   00009C 8D000000              CALLF     TIM4_ClearITPendingBit
    518          }
   \   0000A0 8D000000              CALLF     L:?pop_l1
   \   0000A4 8D000000              CALLF     L:?pop_l0
   \   0000A8 80                    IRET
    519          #endif /*STM8S903*/
    520          
    521          /**
    522            * @brief  Eeprom EEC Interrupt routine
    523            * @param None
    524            * @retval
    525          	* None
    526            */

   \                                 In section .far_func.text, align 1
    527          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    528          {
    529            /* In order to detect unexpected events during development,
    530               it is recommended to set a breakpoint on the following instruction.
    531            */
    532          }
   \                     EEPROM_EEC_IRQHandler:
   \                     _interrupt_26:
   \   000000 80                    IRET
    533          
    534          /**
    535            * @}
    536            */
    537          
    538          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timeout_uart                      4
     uart_data                       107
     TRAP_IRQHandler                   1
     TLI_IRQHandler                    1
     AWU_IRQHandler                    1
     CLK_IRQHandler                    1
     EXTI_PORTA_IRQHandler             1
     EXTI_PORTB_IRQHandler             1
     EXTI_PORTC_IRQHandler             1
     EXTI_PORTD_IRQHandler             1
     EXTI_PORTE_IRQHandler             1
     SPI_IRQHandler                    1
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                       1
     TIM1_CAP_COM_IRQHandler           1
     TIM2_UPD_OVF_BRK_IRQHandler       1
     TIM2_CAP_COM_IRQHandler           1
     UART1_TX_IRQHandler               1
     UART1_RX_IRQHandler              93
     I2C_IRQHandler                    1
     ADC1_IRQHandler                   1
     gps_fix                           1
     time_led                          4
     TIM4_UPD_OVF_IRQHandler         169
     EEPROM_EEC_IRQHandler             1

 
 280 bytes in section .far_func.text
 116 bytes in section .near.bss
 
 280 bytes of CODE memory
 116 bytes of DATA memory

Errors: none
Warnings: none
