###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             24/Jan/2015  12:33:13 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Libraries\STM8S_St #
#                    dPeriph_Driver\src\stm8s_beep.c                          #
#    Command line =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Libraries\STM8S_St #
#                    dPeriph_Driver\src\stm8s_beep.c -e -Ol --no_cse          #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model medium              #
#                    --data_model medium -o D:\Project\STM8S_StdPeriph_Lib_V2 #
#                    .1.0\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S208\Ob #
#                    j\ --dlib_config "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 6.0\stm8\LIB\dlstm8mmn.h" -D                   #
#                    USE_STM8_128_EVAL -D STM8S003 -lC                        #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\List\ -lb                 #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\List\ -I                  #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\..\ -I                             #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\..\..\..\Libraries\STM8S_StdPeriph #
#                    _Driver\inc\ -I D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Pr #
#                    oject\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Utilities #
#                    \STM8S_EVAL\ -I D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Pr #
#                    oject\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Utilities #
#                    \STM8S_EVAL\STM8S-128_EVAL\ -I                           #
#                    D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\..\..\..\Utilities\STM8S_EVAL\Comm #
#                    on\ --vregs 16                                           #
#    List file    =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\List\stm8s_beep.lst       #
#    Object file  =  D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Project\STM8S_StdP #
#                    eriph_Template\EWSTM8\STM8S208\Obj\stm8s_beep.o          #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\STM8S_StdPeriph_Lib_V2.1.0\Libraries\STM8S_StdPeriph_Driver\src\stm8s_beep.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_beep.c
      4            * @author  MCD Application Team
      5            * @version V2.1.0
      6            * @date    18-November-2011
      7            * @brief   This file contains all the functions for the BEEP peripheral.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm8s_beep.h"
     24          
     25          /** @addtogroup STM8S_StdPeriph_Driver
     26            * @{
     27            */
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30          /* Private macro -------------------------------------------------------------*/
     31          /* Private variables ---------------------------------------------------------*/
     32          /* Private function prototypes -----------------------------------------------*/
     33          /* Private functions ---------------------------------------------------------*/
     34          
     35          /* Public functions ----------------------------------------------------------*/
     36          
     37          /**
     38            * @addtogroup BEEP_Public_Functions
     39            * @{
     40            */
     41          
     42          /**
     43            * @brief  Deinitializes the BEEP peripheral registers to their default reset
     44            * values.
     45            * @param  None
     46            * @retval None
     47            */

   \                                 In section .far_func.text, align 1
     48          void BEEP_DeInit(void)
     49          {
     50              BEEP->CSR = BEEP_CSR_RESET_VALUE;
   \                     BEEP_DeInit:
   \   000000 351F50F3              MOV       L:0x50f3, #0x1f
     51          }
   \   000004 87                    RETF
     52          
     53          /**
     54            * @brief  Initializes the BEEP function according to the specified parameters.
     55            * @param   BEEP_Frequency Frequency selection.
     56            * can be one of the values of @ref BEEP_Frequency_TypeDef.
     57            * @retval None
     58            * @par Required preconditions:
     59            * The LS RC calibration must be performed before calling this function.
     60            */

   \                                 In section .far_func.text, align 1
     61          void BEEP_Init(BEEP_Frequency_TypeDef BEEP_Frequency)
     62          {
   \                     BEEP_Init:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
     63          
     64              /* Check parameter */
     65              assert_param(IS_BEEP_FREQUENCY_OK(BEEP_Frequency));
   \   000005 3D00                  TNZ       S:?b8
   \   000007 271B                  JREQ      L:??BEEP_Init_0
   \   000009 B600                  LD        A, S:?b8
   \   00000B A140                  CP        A, #0x40
   \   00000D 2715                  JREQ      L:??BEEP_Init_0
   \   00000F B600                  LD        A, S:?b8
   \   000011 A180                  CP        A, #0x80
   \   000013 270F                  JREQ      L:??BEEP_Init_0
   \   000015 AE0041                LDW       X, #0x41
   \   000018 BF00                  LDW       S:?w1, X
   \   00001A 5F                    CLRW      X
   \   00001B BF00                  LDW       S:?w0, X
   \   00001D AE0000                LDW       X, #`?<Constant "D:\\\\Project\\\\STM8S_StdP...">`
   \   000020 8D000000              CALLF     assert_failed
     66          
     67              /* Set a default calibration value if no calibration is done */
     68              if ((BEEP->CSR & BEEP_CSR_BEEPDIV) == BEEP_CSR_BEEPDIV)
   \                     ??BEEP_Init_0:
   \   000024 C650F3                LD        A, L:0x50f3
   \   000027 A41F                  AND       A, #0x1f
   \   000029 A11F                  CP        A, #0x1f
   \   00002B 2610                  JRNE      L:??BEEP_Init_1
     69              {
     70                  BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPDIV); /* Clear bits */
   \   00002D C650F3                LD        A, L:0x50f3
   \   000030 A4E0                  AND       A, #0xe0
   \   000032 C750F3                LD        L:0x50f3, A
     71                  BEEP->CSR |= BEEP_CALIBRATION_DEFAULT;
   \   000035 C650F3                LD        A, L:0x50f3
   \   000038 AA0B                  OR        A, #0xb
   \   00003A C750F3                LD        L:0x50f3, A
     72              }
     73          
     74              /* Select the output frequency */
     75              BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPSEL);
   \                     ??BEEP_Init_1:
   \   00003D C650F3                LD        A, L:0x50f3
   \   000040 A43F                  AND       A, #0x3f
   \   000042 C750F3                LD        L:0x50f3, A
     76              BEEP->CSR |= (uint8_t)(BEEP_Frequency);
   \   000045 B600                  LD        A, S:?b8
   \   000047 CA50F3                OR        A, L:0x50f3
   \   00004A C750F3                LD        L:0x50f3, A
     77          
     78          }
   \   00004D 320000                POP       S:?b8
   \   000050 87                    RETF
     79          
     80          /**
     81            * @brief  Enable or disable the BEEP function.
     82            * @param   NewState Indicates the new state of the BEEP function.
     83            * @retval None
     84            * @par Required preconditions:
     85            * Initialisation of BEEP and LS RC calibration must be done before.
     86            */

   \                                 In section .far_func.text, align 1
     87          void BEEP_Cmd(FunctionalState NewState)
     88          {
     89              if (NewState != DISABLE)
   \                     BEEP_Cmd:
   \   000000 4D                    TNZ       A
   \   000001 2705                  JREQ      L:??BEEP_Cmd_0
     90              {
     91                  /* Enable the BEEP peripheral */
     92                  BEEP->CSR |= BEEP_CSR_BEEPEN;
   \   000003 721A50F3              BSET      L:0x50f3, #0x5
   \   000007 87                    RETF
     93              }
     94              else
     95              {
     96                  /* Disable the BEEP peripheral */
     97                  BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPEN);
   \                     ??BEEP_Cmd_0:
   \   000008 721B50F3              BRES      L:0x50f3, #0x5
     98              }
     99          }
   \   00000C 87                    RETF
    100          
    101          /**
    102            * @brief  Update CSR register with the measured LSI frequency.
    103            * @par Note on the APR calculation:
    104            * A is the integer part of LSIFreqkHz/4 and x the decimal part.
    105            * x <= A/(1+2A) is equivalent to A >= x(1+2A) and also to 4A >= 4x(1+2A) [F1]
    106            * but we know that A + x = LSIFreqkHz/4 ==> 4x = LSIFreqkHz-4A
    107            * so [F1] can be written :
    108            * 4A >= (LSIFreqkHz-4A)(1+2A)
    109            * @param   LSIFreqHz Low Speed RC frequency measured by timer (in Hz).
    110            * @retval None
    111            * @par Required preconditions:
    112            * - BEEP must be disabled to avoid unwanted interrupts.
    113            */

   \                                 In section .far_func.text, align 1
    114          void BEEP_LSICalibrationConfig(uint32_t LSIFreqHz)
    115          {
   \                     BEEP_LSICalibrationConfig:
   \   000000 8D000000              CALLF     L:?push_l2
   \   000004 8D000000              CALLF     L:?mov_l2_l0
    116          
    117              uint16_t lsifreqkhz;
    118              uint16_t A;
    119          
    120              /* Check parameter */
    121              assert_param(IS_LSI_FREQUENCY_OK(LSIFreqHz));
   \   000008 AEADB0                LDW       X, #0xadb0
   \   00000B BF00                  LDW       S:?w3, X
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F BF00                  LDW       S:?w2, X
   \   000011 8D000000              CALLF     L:?mov_l0_l2
   \   000015 8D000000              CALLF     L:?sub32_l0_l0_l1
   \   000019 BE00                  LDW       X, S:?w0
   \   00001B A30000                CPW       X, #0x0
   \   00001E 2605                  JRNE      L:??BEEP_LSICalibrationConfig_0
   \   000020 BE00                  LDW       X, S:?w1
   \   000022 A39C41                CPW       X, #0x9c41
   \                     ??BEEP_LSICalibrationConfig_0:
   \   000025 250F                  JRC       L:??BEEP_LSICalibrationConfig_1
   \   000027 AE0079                LDW       X, #0x79
   \   00002A BF00                  LDW       S:?w1, X
   \   00002C 5F                    CLRW      X
   \   00002D BF00                  LDW       S:?w0, X
   \   00002F AE0000                LDW       X, #`?<Constant "D:\\\\Project\\\\STM8S_StdP...">`
   \   000032 8D000000              CALLF     assert_failed
    122          
    123              lsifreqkhz = (uint16_t)(LSIFreqHz / 1000); /* Converts value in kHz */
   \                     ??BEEP_LSICalibrationConfig_1:
   \   000036 8D000000              CALLF     L:?mov_l0_l2
   \   00003A 8D000000              CALLF     L:?udiv32_l0_l0_dl
   \   00003E 000003E8              DC32      0x3e8
    124          
    125              /* Calculation of BEEPER calibration value */
    126          
    127              BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPDIV); /* Clear bits */
   \   000042 C650F3                LD        A, L:0x50f3
   \   000045 A4E0                  AND       A, #0xe0
   \   000047 C750F3                LD        L:0x50f3, A
    128          
    129              A = (uint16_t)(lsifreqkhz >> 3U); /* Division by 8, keep integer part only */
   \   00004A BE00                  LDW       X, S:?w1
   \   00004C 54                    SRLW      X
   \   00004D 54                    SRLW      X
   \   00004E 54                    SRLW      X
   \   00004F 9093                  LDW       Y, X
    130          
    131              if ((8U * A) >= ((lsifreqkhz - (8U * A)) * (1U + (2U * A))))
   \   000051 AE0008                LDW       X, #0x8
   \   000054 BF00                  LDW       S:?w0, X
   \   000056 93                    LDW       X, Y
   \   000057 8D000000              CALLF     L:?mul16_x_x_w0
   \   00005B BF00                  LDW       S:?w0, X
   \   00005D BE00                  LDW       X, S:?w1
   \   00005F 72B00000              SUBW      X, S:?w0
   \   000063 BF00                  LDW       S:?w1, X
   \   000065 93                    LDW       X, Y
   \   000066 58                    SLLW      X
   \   000067 5C                    INCW      X
   \   000068 BF00                  LDW       S:?w0, X
   \   00006A BE00                  LDW       X, S:?w1
   \   00006C 8D000000              CALLF     L:?mul16_x_x_w0
   \   000070 BF00                  LDW       S:?w1, X
   \   000072 AE0008                LDW       X, #0x8
   \   000075 BF00                  LDW       S:?w0, X
   \   000077 93                    LDW       X, Y
   \   000078 8D000000              CALLF     L:?mul16_x_x_w0
   \   00007C B300                  CPW       X, S:?w1
   \   00007E 250E                  JRC       L:??BEEP_LSICalibrationConfig_2
    132              {
    133                  BEEP->CSR |= (uint8_t)(A - 2U);
   \   000080 909F                  LD        A, YL
   \   000082 ABFE                  ADD       A, #0xfe
   \   000084 CA50F3                OR        A, L:0x50f3
   \   000087 C750F3                LD        L:0x50f3, A
   \   00008A AC000000              JPF       L:?epilogue_l2
    134              }
    135              else
    136              {
    137                  BEEP->CSR |= (uint8_t)(A - 1U);
   \                     ??BEEP_LSICalibrationConfig_2:
   \   00008E 909F                  LD        A, YL
   \   000090 ABFF                  ADD       A, #0xff
   \   000092 CA50F3                OR        A, L:0x50f3
   \   000095 C750F3                LD        L:0x50f3, A
    138              }
    139          }
   \   000098 AC000000              JPF       L:?epilogue_l2

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "D:\\\\Project\\\\STM8S_StdP...">`:
   \   000000 443A5C50726F          DC8 44H, 3AH, 5CH, 50H, 72H, 6FH, 6AH, 65H
   \   000008 63745C53544D          DC8 63H, 74H, 5CH, 53H, 54H, 4DH, 38H, 53H
   \   000010 5F5374645065          DC8 5FH, 53H, 74H, 64H, 50H, 65H, 72H, 69H
   \   000018 70685F4C6962          DC8 70H, 68H, 5FH, 4CH, 69H, 62H, 5FH, 56H
   \   000020 322E312E305C          DC8 32H, 2EH, 31H, 2EH, 30H, 5CH, 4CH, 69H
   \   000028 627261726965          DC8 62H, 72H, 61H, 72H, 69H, 65H, 73H, 5CH
   \   000030 53544D38535F          DC8 53H, 54H, 4DH, 38H, 53H, 5FH, 53H, 74H
   \   000038 645065726970          DC8 64H, 50H, 65H, 72H, 69H, 70H, 68H, 5FH
   \   000040 447269766572          DC8 44H, 72H, 69H, 76H, 65H, 72H, 5CH, 73H
   \   000048 72635C73746D          DC8 72H, 63H, 5CH, 73H, 74H, 6DH, 38H, 73H
   \   000050 5F626565702E          DC8 5FH, 62H, 65H, 65H, 70H, 2EH, 63H, 0
    140          
    141          /**
    142            * @}
    143            */
    144            
    145          /**
    146            * @}
    147            */
    148            
    149          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                           Bytes
     --------------                           -----
     BEEP_DeInit                                 5
     BEEP_Init                                  81
     BEEP_Cmd                                   13
     BEEP_LSICalibrationConfig                 156
     ?<Constant "D:\\Project\\STM8S_StdP...">   88

 
 255 bytes in section .far_func.text
  88 bytes in section .near.rodata
 
 255 bytes of CODE  memory
  88 bytes of CONST memory

Errors: none
Warnings: none
